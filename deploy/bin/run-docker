#!/usr/bin/env bash
set -eou pipefail

dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../../" && pwd )" && cd "$dir"
app="$(basename $(pwd))"
arch=''
img=''
job_cmd='/usr/local/deploy/bin/run-job'
pull_new_image=''

case "$(uname -m)" in
  amd64* | x_86* | x86_64* )
    img="quay.io/skilbjo/${app}:latest" ;;
  arm* ) arch='arm'
    img="quay.io/skilbjo/${app}:${arch}" ;;
esac

usage(){ echo "Usage: ${0} [<--pull-new-image>]" 1>&2; exit 1; }
arg_arr=("$@")
for i in "${!arg_arr[@]}"; do
  if [[ ${arg_arr[$i]} == '--pull-new-image' ]]; then
    pull_new_image='y'
    set -- "${@:1:${i}-1+1}" "${@:${i}+1+1}" # remove --pull-new-image from args list
  fi
done

get_current_artifacts(){
  # remove all app containers
  set +e
  ## below not needed as the docker run cmd has the --rm flag
  #docker ps -a | grep "$app" | awk '{print $1}' | uniq | xargs docker rm -f

  # remove all app images
  docker images | grep "$app" | awk '{print $3}' | uniq | xargs docker rmi -f
  set -e
}

update_crond(){
  case "$(whoami)" in
    circleci ) echo '' ;;   # circleci
    runner )   echo '' ;;   # github ci
    root )     echo '' ;;   # gitlab ci
    *) case "$(uname)" in
         ('Linux') sed -i '1i SHELL=/usr/bin/bash'         "${dir}/deploy/tasks/crontab"
                   sed -i '1i cmd="deploy/bin/run-docker"' "${dir}/deploy/tasks/crontab" ;;
       esac
       sudo cp "${dir}/deploy/tasks/crontab" "/etc/cron.d/${app}" ;;
  esac
}

# any scripts need updating?
git pull -f && \
  update_crond

if [[ -n pull_new_image ]]; then
  get_current_artifacts
fi

docker run --rm \
  --name="$(echo $app $@ | tr ' ' '_')" \
  -e jdbc_db_uri="$(echo "${jdbc_db_uri:-}")" \
  -e quandl_api_key="$(echo $quandl_api_key)" \
  -e tiingo_api_key="$(echo $tiingo_api_key)" \
  -e intrinio_api_key="$(echo $intrinio_api_key)" \
  -e alpha_vantage_api_key="$(echo $alpha_vantage_api_key)" \
  -e fred_api_key="$(echo $fred_api_key)" \
  -e healthchecks_io_api_key="$(echo $healthchecks_io_api_key)" \
  -e AWS_ACCESS_KEY_ID="$(cat ~/.aws/credentials | grep -A 2 skilbjo-robot | grep aws_access_key_id | awk '{print $3}')" \
  -e AWS_SECRET_ACCESS_KEY="$(cat ~/.aws/credentials | grep -A 2 skilbjo-robot | grep aws_secret_access_key | awk '{print $3}')" \
  -e AWS_REGION='us-east-1' \
  "$img" \
  "$job_cmd" $@
